/* =======================================================================*/
/**
* @file This is REST API for user
* @author NhatHo
*/
/* =======================================================================*/

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - email
 *         - name
 *         - username
 *         - checkLogin
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the user, auto-generated by MongoDB.
 *           readOnly: true
 *           example: 61882ca2ecd1b1934636eb22
 *         email:
 *           type: string
 *           description: The email associated with the user's account
 *           example: YeahScience@gmail.com
 *         name:
 *           type: string
 *           description: The user's full name
 *           example: Jesse Pinkman
 *         username:
 *           type: string
 *           description: User's account username
 *           example: YeahScience!
 *         checkLogin:
 *           type: boolean
 *           description: Whether or not to check if user is logged in
 *         password:
 *           type: string
 *           description: User's account password
 *           example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *         confirm_password:
 *           type: string
 *           description: User's password confirmation
 *           example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *         about:
 *           type: string
 *           description: User's about me description
 *           example: About me
 *         birthday:
 *           type: string
 *           format: date
 *           description: User's birthday
 *         major:
 *           $ref: '#/components/schemas/Major'
 *           description: User's major
 *           example: Chemistry
 *         year:
 *           type: string
 *           enum: [Freshman, Sophomore, Junior, Senior, Graduate, Ph.D]
 *           description: User's year in university
 *           example: Freshman
 *         classes:
 *           type: array
 *           items:
 *             $ref: '#components/schemas/Class'
 *           description: Array of classes the user is enrolled in
 *         profileURL:
 *           type: string
 *           description: URL linking to the user's profile picture
 *           example: https://static.wikia.nocookie.net/breakingbad/images/0/0c/JesseS5B.jpg
 *         zoomid:
 *           type: string
 *           description: User's zoom ID
 *           example: '@YeahScience!'
 *         pastbuddies:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/PastBuddy'
 *           description: Array of buddies that the user has previously matched with
 *         buddyrequests:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/BuddyRequest'
 *           description: Array of requests that the buddy has sent/received
 *         resetPasswordToken:
 *           type: string
 *           description: Token for resetting account password
 *         resetPasswordExpires:
 *           type: string
 *           format: date-time
 *           description: Date when the reset password token will expire
 *     PastBuddy:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the buddy user, auto-generated by MongoDB.
 *           readOnly: true
 *         name:
 *           type: string
 *           description: The buddy user's full name
 *           example: Jesse Pinkman
 *         profileURL:
 *           type: string
 *           description: URL linking to the buddy user's profile picture
 *     Major:
 *       type: object
 *       required:
 *         - id
 *         - name
 *       properties:
 *         id:
 *           type: integer
 *           description: The major identifier
 *           example: 1
 *         name:
 *           type: string
 *           description: The full name of the major
 *           example: Chemistry
 *     Class:
 *       type: object
 *       required:
 *         - id
 *         - name
 *       properties:
 *         id:
 *           type: string
 *           description: The course identifier
 *           example: CS130
 *         name:
 *           type: string
 *           description: The full name of the class
 *           example: Software Engineering
 *     BuddyRequest:
 *       type: object
 *       required:
 *         - sender
 *         - receiver
 *         - dateslots
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the request, auto-generated by MongoDB.
 *           readOnly: true
 *         sender:
 *           type: string
 *           description: The MongoDB object ID of the user sending the request.
 *           example: 61882ca2ecd1b1934636eb21
 *         receiver:
 *           type: string
 *           description: The MongoDB object ID of the user receiving the request.
 *           example: 61882ca2ecd1b1934636eb22
 *         status:
 *           type: string
 *           description: The current status of the request
 *           enum: [Pending, Accepted, Cancelled]
 *           example: Pending
 *           readOnly: true
 *         dateslots:
 *           type: array
 *           items:
 *             type: string
 *             format: date-time
 *           minItems: 2
 *           description: Array of Dates representing the start and end times of proposed study session timeslots.
 *                        Even indexed elements represent start times while the neighborind odd indexed element to 
 *                        the right represents the corresponding end time.
 *           example: ['2021-11-25T01:25:57.000+00:00', '2021-11-25T03:25:57.000+00:00']
 */

const express = require("express");
const router = express.Router();
const User = require("../model/usersModel");
const nodemailer = require('nodemailer');
const crypto = require('crypto');
var ObjectId = require('mongodb').ObjectId; 

//for hashing passwords
const bcrypt = require("bcryptjs");
const saltRounds = 10;

/*======================================POST method===================================*/
/**
 * Endpoint for registering a user account
 * @author Nhat Ho
 * @swagger
 *
 * /user/create:
 *   post:
 *     summary: Registers a new user account
 *     tags: [User]
 *     description: Creates a new user account for the registering user
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email associated with the user's account
 *                 example: YeahScience@gmail.com
 *               name:
 *                 type: string
 *                 description: The user's full name
 *                 example: Jesse Pinkman
 *               username:
 *                 type: string
 *                 description: User's account username
 *                 example: YeahScience!
 *               password:
 *                 type: string
 *                 description: User's account password
 *                 example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *               confirm_password:
 *                 type: string
 *                 description: User's password confirmation
 *                 example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *               checkLogin:
 *                 type: boolean
 *                 description: Whether or not to check if user is logged in
 *     responses:
 *       200:
 *         description: Success indicator and success/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.post("/register", (req, res) => {
    const {
      email,
      name,
      username,
      password,
      confirm_password,
      checkLogin,
    } = req.body;
    console.log("body", req.body);

    if (password !== confirm_password) {
        console.log("Password did not match");
        return res.send({ success: false, message: "Password did not match" });
    }

    User.find({
      $or: [{ email: email }, { username: username }],
    })
    .exec()
    .then((user) => {
      //console.log("user is: ", user);
      if (user.length >= 1) {
        let message;
        if (user[0].email === email) message = "Email already exists";
        else message = "User name already exists";
        res.send({ success: false, message: message });
      } 
      else {
        bcrypt.hash(req.body.password, saltRounds, (err, hash) => {
          if (err) {
            res.send({ success: false, message: err });
          } else {
            const user = new User({
              email: email,
              name: name,
              username: username,
              password: hash,
              confirm_password: hash,
              checkLogin: checkLogin,
            });
            user
              .save()
              .then((result) => {
                console.log(result);
                res.send({
                  success: true,
                  message: "Congrat, You register successfully. Go to Login page!",
                });
              })
              .catch((err) => {
                console.log(err);
                res.send({ success: false, message: err });
              });
          }
        });
      }
    });
});

/*======================================POST method to reset password===================================*/
 /**
 * Endpoint for resetting a user's password
 * @author Nhat Ho
 * @swagger
 *
 * /user/resetPassword:
 *   post:
 *     summary: Resets the user's password
 *     tags: [User]
 *     description: Performs reset password operation for the user
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email associated with the user's account
 *                 example: YeahScience@gmail.com
 *     responses:
 *       200:
 *         description: Success indicator and success/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.post("/resetPassword", (req, res) => {
  const {email} = req.body;
  const token = crypto.randomBytes(20).toString('hex');
  console.log("test token " + token);
  User.findOneAndUpdate({ email: email }, 
    {
      resetPasswordToken: token,
      resetPasswordExpires: Date.now() + 360000, //expire in 1 hour
    }, 
    {
      new: true,
    })
  .exec()
  .then((data) => {
    if(data === null){
      res.send({ success: false, message: "Email does not exist!"});
    }else {
      console.log("user after update", data);

      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: `${process.env.EMAIL_ADDRESS}`,
          pass: `${process.env.EMAIL_PASSWORD}`,
        },
      });
      const mailOptions = {
        from: "studybuddycs130@gmail.com",
        to: `${email}`,
        subject: 'Link to reset your password',
        text:
          'You are receiving this email because you have requested the reset of password for your acount.\n\n '
          + 'Please click on the following link, or paste this into your browser to complete the process within one hour of receving it:\n\n'
          + `http://localhost:3000/reset/${token}\n\n`
          + 'If you did not request it, please ignore this email and your password will remain unchanged.\n',
      };
  
      console.log('sending email');
      transporter.sendMail(mailOptions, (err, response) => {
        if(err) {
          console.error('There is an error: ', err);
          res.send({ success: false, message: "Could not send email since " + err + ". Please try again!" });
        }else {
          console.log("here is the res: ", response);
          res.send({ success: true, message: "Reset Password link was sent. Please check your email!" });
          res.status(200).json('recovery email sent');
        }
      });
    }
  })
  .catch((err) => {
      res.send({
        success: false,
        error: "Update token fail caused by" + err,
      });
  });
});

/*======================================GET method for normal login===================================*/
async function checkPass(user, password) {
  /*compare input password with hashed password in db*/
  const match = await bcrypt.compare(password, user.password);
  return match;
}

/**
 * Endpoint for user login
 * @author Nhat Ho
 * @swagger
 *
 * /user/login:
 *   get:
 *     summary: Logs the user in
 *     tags: [User]
 *     description: Logs the user into the Study Buddy system
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email associated with the user's account
 *                 example: YeahScience@gmail.com
 *               password:
 *                 type: string
 *                 description: User's account password
 *                 example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *     responses:
 *       200:
 *         description: User ID along with success indicator and success/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   desciption: User's MongoDB object ID, if login was successful
 *                   example: 61882ca2ecd1b1934636eb22
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.get("/login", (req, res) => {
  const { email, password } = req.query;

  /*console.log(email);*/

  if (email.length > 0 && password.length > 0) {
    /*find user with given email in the database*/
    User.findOne({ email: email }, async (err, user) => {
      /*no user in database has specified email*/
      if (!user) {
        console.log("User does not exists");
        res.send({ success: false, message: "User does not exist!" });
      } else {
        /*email exists but incorrect password*/
        let match = await checkPass(user, password);
        if (!match) {
          console.log("Email exists but incorrect password");
          res.send({
            success: false,
            message: "Incorrect password",
          });
        } else {
        //   /*email and passwords match*/
          console.log("Success: email and password match");
          res.send({ success: true, id: user._id, message: "Successful login!" });
        }
      }
    });
  } else {
    console.log("No inputted email or password");
    res.send({
      success: false,
      message: "Email or Password can not be empty!",
    });
  }
});

/*======================================GET method for Facebook login===================================*/
 /**
 * Endpoint for user Facebook login
 * @author Nhat Ho
 * @swagger
 *
 * /user/facebookLogin:
 *   get:
 *     summary: Logs the user in via Facebook
 *     tags: [User]
 *     description: Logs the user into the Study Buddy system using Facebook login
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email associated with the user's account
 *                 example: YeahScience@gmail.com
 *     responses:
 *       200:
 *         description: Success indicator and success/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.get("/facebookLogin", (req, res) => {
  const { email } = req.query;

  if (email.length > 0) {
    /*find user with given email in the database*/
    User.findOne({ email: email }, async (err, user) => {
      /*no user in database has specified email*/
      if (!user) {
        console.log("User does not exists");
        res.send({ success: false, message: "User does not exist!" });
      } else {
        console.log("Success: email matched");
        res.send({ success: true, message: "email existed!", user: user });
      }
    });
  } else {
    console.log("No inputted email");
    res.send({
      success: false,
      message: "Email can not be empty!",
    });
  }
});

/*======================================GET method for get user's information===================================*/
/**
 * Endpoint for retrieving user info from email
 * @author Nhat Ho
 * @swagger
 *
 * /user/:email/information:
 *   get:
 *     summary: Retrieves user info based on email
 *     tags: [User]
 *     description: Retrieves all of the user's information using email as the lookup
 *     parameters:
 *       - in: path
 *         name: email
 *         required: true
 *         description: The email associated with the user to look up
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User information along with success indicator and message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 user:
 *                   $ref: '#/components/schemas/User'
 *                   description: The user associated with the provided email
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.get("/:email/information", async (req, res) => {
  const { email } = req.params;
  console.log("Inside get information");
  /* Check if portfolio exist*/
  User.findOne({ email: email }, async (err, user) => {
    console.log("user", user);
    if (user) {
      res.send({ success: true, message: "Success!", user: user });
    } else {
      res.send({
        success: false,
        message: `User does not exist for ${email}`,
      });
    }
  });
});

/*======================================GET method for get user's information based on id===================================*/
/**
 * Endpoint for retrieving user info from ID
 * @author Nhat Ho
 * @swagger
 *
 * /user/:id:
 *   get:
 *     summary: Retrieves user info based on ID
 *     tags: [User]
 *     description: Retrieves all of the user's information using object ID as the lookup
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: The MongoDB object ID of the user to look up
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User information along with success indicator and message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 user:
 *                   $ref: '#/components/schemas/User'
 *                   description: The user associated with the provided object ID
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  console.log("The id is " + id);
  /* Check if portfolio exist*/
  User.findOne({_id: new ObjectId(id) }, async (err, user) => {
    console.log("user", user);
    if (user) {
      res.send({ success: true, message: "Success!", user: user });
    } else {
      res.send({
        success: false,
        message: `User does not exist for ${id}`,
      });
    }
  });
});

/*======================================GET method for checking token expire===================================*/
/**
 * Endpoint for retrieving user info from ID
 * @author Nhat Ho
 * @swagger
 *
 * /user/:token/checkTokenPass:
 *   get:
 *     summary: Retrieves user info based on ID
 *     tags: [User]
 *     description: Retrieves all of the user's information using object ID as the lookup
 *     parameters:
 *       - in: path
 *         name: token
 *         required: true
 *         description: Token for resetting account password
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User email along with success indicator and message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 email:
 *                   type: string
 *                   description: The email linked to the reset password token
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.get("/:token/checkTokenPass", async (req, res) => {
  const { token } = req.params;
  console.log("The token is " + token);
  /* Check if portfolio exist*/
  User.findOne({resetPasswordToken: token, resetPasswordExpires:{$gt: Date.now(),} }, async (err, user) => {
    console.log("user", user);
    if (user) {
      console.log("email in checkTokenpass", user.email);
      res.send({ success: true, message: "password reset link ok!", email: user.email });
    } else {
      res.send({
        success: false,
        message: "Password reset link is invalid or has expired",
      });
    }
  });
});

/*======================================PUT method to update password===================================*/
/**
 * Endpoint for updating password
 * @author Nhat Ho
 * @swagger
 *
 * /user/updatePassword:
 *   put:
 *     summary: Updates user's password
 *     tags: [User]
 *     description: Updates the user's account password to the new password
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email associated with the user's account
 *                 example: YeahScience@gmail.com
 *               password:
 *                 type: string
 *                 description: The new password for the user's account
 *                 example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *     responses:
 *       200:
 *         description: Success indicator and succes/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.put("/updatePassword", (req, res) => {
  let email = req.body.email;
  bcrypt.hash(req.body.password, saltRounds, (err, hash) => {
    if (err) {
      res.send({ success: false, message: err });
    } else {
        console.log("hash is: ", hash);
        User.findOneAndUpdate({ email: email }, 
          {
            password: hash,
            confirm_password: hash,
          }, 
          {
            new: true,
          })
        .exec()
        .then((data) => {
          console.log("Updated password", data);
          res.send({
            success: true,
            message: "Password Update Successfully!",
          });
        })
        .catch((err) => {
          console.log("update fail in backend log");
          res.send({
            success: false,
            message: `Update failed, error is ${err}`,
          });
        });
      }
  });
});

/*======================================PUT method===================================*/
/**
 * Endpoint for updating user info
 * @author Nhat Ho
 * @swagger
 *
 * /email/update:
 *   put:
 *     summary: Updates user's information
 *     tags: [User]
 *     description: Updates the user's profile/account information
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *     responses:
 *       200:
 *         description: Success indicator and succes/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.put("/email/update", (req, res) => {
  let updateObject = req.body;
  /*console.log("updateObject: " + updateObject.email);*/
  User.findOneAndUpdate({ email: req.body.email }, updateObject, {
    new: true,
  })
  .exec()
  .then((data) => {
    console.log("Updated data", data);
    res.send({
      success: true,
      message: "Information updated",
    });
  })
  .catch((err) => {
    console.log("update fail in backend log");
    res.send({
      success: false,
      message: `Update failed, error is ${err}`,
    });
  });
});

/*======================================DELETE method===================================*/
 /**
 * Endpoint for deleting user's account
 * @author Nhat Ho
 * @swagger
 *
 * /delete/:email:
 *   delete:
 *     summary: Deletes the user's account
 *     tags: [User]
 *     description: Deletes the user's account associated with the given email from the system
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email of the account to delete
 *                 example: YeahScience@gmail.com
 *     responses:
 *       200:
 *         description: Success indicator and succes/error message
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: true
 *                 message:
 *                   type: string
 *                   description: Success message if request was completed successfully, otherwise error message
 *                   example: "Success!"
 */
router.delete("/delete/:email", async (req, res) => {
  console.log("In delete user account");
  const { email } = req.params;
  User.findOneAndRemove({ email: email }, (err, user) => {
    console.log(user);
    if (err) {
      res.send({
        success: false,
        message: err,
      });
    }
    if (user) {
      res.send({
        success: true,
        message: "Deleted Successfully!",
        action: "deleted",
      });
    } else {
      res.send({
        success: false,
        message: "Deleted Failed!",
      });
    }
  });
});

module.exports = router;