/* =======================================================================*/
/**
* @file This is REST API for search
* @author Vishnu Devarakonda
*/
/* =======================================================================*/

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - email
 *         - name
 *         - username
 *         - checkLogin
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the user, auto-generated by MongoDB.
 *           readOnly: true
 *           example: 61882ca2ecd1b1934636eb22
 *         email:
 *           type: string
 *           description: The email associated with the user's account
 *           example: YeahScience@gmail.com
 *         name:
 *           type: string
 *           description: The user's full name
 *           example: Jesse Pinkman
 *         username:
 *           type: string
 *           description: User's account username
 *           example: YeahScience!
 *         checkLogin:
 *           type: boolean
 *           description: Whether or not to check if user is logged in
 *         password:
 *           type: string
 *           description: User's account password
 *           example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *         confirm_password:
 *           type: string
 *           description: User's password confirmation
 *           example: $2a$10$hDehc2VFpnHp9PAVJwQel.Z3lf2.QPC6JadeEWS.9wipuOxWj/doq
 *         about:
 *           type: string
 *           description: User's about me description
 *           example: About me
 *         birthday:
 *           type: string
 *           format: date
 *           description: User's birthday
 *         major:
 *           $ref: '#/components/schemas/Major'
 *           description: User's major
 *           example: Chemistry
 *         year:
 *           type: string
 *           enum: [Freshman, Sophomore, Junior, Senior, Graduate, Ph.D]
 *           description: User's year in university
 *           example: Freshman
 *         classes:
 *           type: array
 *           items:
 *             $ref: '#components/schemas/Class'
 *           description: Array of classes the user is enrolled in
 *         profileURL:
 *           type: string
 *           description: URL linking to the user's profile picture
 *           example: https://static.wikia.nocookie.net/breakingbad/images/0/0c/JesseS5B.jpg
 *         zoomid:
 *           type: string
 *           description: User's zoom ID
 *           example: '@YeahScience!'
 *         pastbuddies:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/PastBuddy'
 *           description: Array of buddies that the user has previously matched with
 *         buddyrequests:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/BuddyRequest'
 *           description: Array of requests that the buddy has sent/received
 *         resetPasswordToken:
 *           type: string
 *           description: Token for resetting account password
 *         resetPasswordExpires:
 *           type: string
 *           format: date-time
 *           description: Date when the reset password token will expire
 *     PastBuddy:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the buddy user, auto-generated by MongoDB.
 *           readOnly: true
 *         name:
 *           type: string
 *           description: The buddy user's full name
 *           example: Jesse Pinkman
 *         profileURL:
 *           type: string
 *           description: URL linking to the buddy user's profile picture
 *     Major:
 *       type: object
 *       required:
 *         - id
 *         - name
 *       properties:
 *         id:
 *           type: integer
 *           description: The major identifier
 *           example: 1
 *         name:
 *           type: string
 *           description: The full name of the major
 *           example: Chemistry
 *     Class:
 *       type: object
 *       required:
 *         - id
 *         - name
 *       properties:
 *         id:
 *           type: string
 *           description: The course identifier
 *           example: CS130
 *         name:
 *           type: string
 *           description: The full name of the class
 *           example: Software Engineering
 *     BuddyRequest:
 *       type: object
 *       required:
 *         - sender
 *         - receiver
 *         - dateslots
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the request, auto-generated by MongoDB.
 *           readOnly: true
 *         sender:
 *           type: string
 *           description: The MongoDB object ID of the user sending the request.
 *           example: 61882ca2ecd1b1934636eb21
 *         receiver:
 *           type: string
 *           description: The MongoDB object ID of the user receiving the request.
 *           example: 61882ca2ecd1b1934636eb22
 *         status:
 *           type: string
 *           description: The current status of the request
 *           enum: [Pending, Accepted, Cancelled]
 *           example: Pending
 *           readOnly: true
 *         dateslots:
 *           type: array
 *           items:
 *             type: string
 *             format: date-time
 *           minItems: 2
 *           description: Array of Dates representing the start and end times of proposed study session timeslots.
 *                        Even indexed elements represent start times while the neighborind odd indexed element to 
 *                        the right represents the corresponding end time.
 *           example: ['2021-11-25T01:25:57.000+00:00', '2021-11-25T03:25:57.000+00:00']
 */

const express = require("express");
const router = express.Router();
const usersModel = require("../model/usersModel");


function getUsersFilter(queries) {
    let filter = {};
    for(let qParam in queries){
        filter[qParam] = {$in: queries[qParam]}
    }
    return filter
}


 /**
 * Endpoint for searching filtered users
 * @author Vishnu Devarakonda
 * @swagger
 *
 * /search/users:
 *   get:
 *     summary: Searches for users matching the filters
 *     tags: [Search]
 *     description: Retrieves all users that match the provided filter queries
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               year:
 *                 type: array
 *                 items:
 *                   type: string
 *                   enum: [Freshman, Sophomore, Junior, Senior, Graduate, Ph.D]
 *                 description: Array of years to search for
 *               classes:
 *                 type: array
 *                 items:
 *                   $ref: '#/components/schemas/Class'
 *               major:
 *                 type: array
 *                 items:
 *                   $ref: '#/components/schemas/Major'
 *     responses:
 *       200:
 *         description: Array of all matching User objects
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 */
router.get("/users", (req, res) => {
    let queries = req.query;
    const filter = getUsersFilter(queries);
    filter["_id"] = {$ne: req.query._id};
    usersModel.find(
        filter,
        {
            _id: 1,
            username: 1,
            name: 1,
            about: 1,
            major: 1,
            year: 1,
            classes: 1,
            profileURL: 1,
        },
        function (err, data) {
            if (err) throw err;
            res.json(data);
            return
        }
    );
})


module.exports = router;