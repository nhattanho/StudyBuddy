 /**
 * @file This is REST API for buddy requests
 * @author Chanel Young
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     BuddyRequest:
 *       type: object
 *       required:
 *         - sender
 *         - receiver
 *         - dateslots
 *       properties:
 *         _id:
 *           type: string
 *           description: The object ID of the request, auto-generated by MongoDB.
 *           readOnly: true
 *         sender:
 *           type: string
 *           description: The MongoDB object ID of the user sending the request.
 *           example: 61882ca2ecd1b1934636eb21
 *         receiver:
 *           type: string
 *           description: The MongoDB object ID of the user receiving the request.
 *           example: 61882ca2ecd1b1934636eb22
 *         status:
 *           type: string
 *           description: The current status of the request
 *           enum: [Pending, Accepted, Cancelled]
 *           example: Pending
 *           readOnly: true
 *         dateslots:
 *           type: array
 *           items:
 *             type: string
 *             format: date-time
 *           minItems: 2
 *           description: Array of Dates representing the start and end times of proposed study session timeslots.
 *                        Even indexed elements represent start times while the neighborind odd indexed element to 
 *                        the right represents the corresponding end time.
 *           example: ['2021-11-25T01:25:57.000+00:00', '2021-11-25T03:25:57.000+00:00']
 */

const express = require("express");
const router = express.Router();
const bodyParser = require('body-parser');

const BuddyRequestModel = require("../model/BuddyRequestsModel");


/**
 * Endpoint for getting all requests sent by a user with given id
 * @author Chanel Young
 * @swagger
 *
 * /buddyrequest/create:
 *   post:
 *     summary: Creates a new buddy request
 *     tags: [BuddyRequest]
 *     description: Performs operations associated with creating a new buddy request
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/BuddyRequest'
 *     responses:
 *       200:
 *         description: Success indicator and error message if request failed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: false
 *                 error:
 *                   type: string
 *                   description: Error message returned by the operation if it failed
 *                   example: "Error message"
 */
router.post("/create", (req, res) => {
    const {
        sender,
        receiver,
        dateslots,
    } = req.body;

    const buddyRequest = new BuddyRequestModel({
        sender: sender,
        receiver: receiver,
        status: "Pending",
        dateslots: dateslots,
    });

    buddyRequest
    .save()
    .then((result) => {
      res.send({
        success: true,
        request: result,
      });
    })
    .catch((err) => {
      res.send({
        success: false,
        error: err,
      });
    });
});


/**
 * Endpoint for getting all requests sent by a user with given id
 * @author Chanel Young
 * @swagger
 *
 * /buddyrequest/delete:
 *   delete:
 *     summary: Deletes a buddy request
 *     tags: [BuddyRequest]
 *     description: Performs operations associated with deleting a buddy request
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               id:
 *                 type: string
 *                 description: The MongoDB object ID of the request in the database
 *     responses:
 *       200:
 *         description: Success indicator and error message if request failed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: false
 *                 error:
 *                   type: string
 *                   description: Error message returned by the operation if it failed
 *                   example: "Error message"
 */
router.delete("/delete/:id", async (req, res) => {
    const { id } = req.params;
    BuddyRequestModel.findOneAndRemove({ _id: id }, (err, buddyrequest) => {
      console.log(buddyrequest);
      if (err) {
        res.send({
          success: false
        });
      }
      else if (buddyrequest) {
        res.send({
          success: true
        });
      } else {
        res.send({
          success: false,
          error: err,
        });
      }
    });
  });


 /**
 * Endpoint for getting all requests sent by a user with given id
 * @author Chanel Young
 * @swagger
 *
 * /buddyrequest/accept:
 *   post:
 *     summary: Accepts a buddy request
 *     tags: [BuddyRequest]
 *     description: Performs operations associated with accepting a buddy request
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               id:
 *                 type: string
 *                 description: The MongoDB object ID of the request in the database
 *     responses:
 *       200:
 *         description: Success indicator and error message if request failed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 *                   example: false
 *                 error:
 *                   type: string
 *                   description: Error message returned by the operation if it failed
 *                   example: "Error message"
 */
router.post("/accept", (req, res) => {
    const {
        id,
    } = req.body;
    BuddyRequestModel.findOneAndUpdate({ _id: id }, {status: "Accepted"}, {
    new: true,
    })
    .exec()
    .then((data) => {
        res.send({
          success: true
        });
    })
    .catch((err) => {
        res.send({
          success: false,
          error: err
        });
    });
});


 /**
 * Endpoint for getting all requests sent by a user with given id
 * @author Chanel Young
 * @swagger
 *
 * /buddyrequest/:id/sent:
 *   get:
 *     summary: Retrieves buddy requests sent by user
 *     tags: [BuddyRequest]
 *     description: Retrieves all buddy requests sent by a user with the given ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: The MongoDB object ID of the user
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: All requests sent by user and whether the API request was successful
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 buddyrequests:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/BuddyRequest'
 *                   description: Array of Buddy Request objects containing all requests sent by user
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 */
router.get("/:id/sent", async (req, res) => {
    const { id } = req.params;

    BuddyRequestModel.find({ sender: id }, async (err, buddyrequests) => {
        res.send({
          success: true,
          buddyrequests: buddyrequests,
        });
    });
});


 /**
 * Endpoint for getting all requests received by a user with given id
 * @author Chanel Young
 * @swagger
 *
 * /buddyrequest/:id/received:
 *   get:
 *     summary: Retrieves buddy requests received by user
 *     tags: [BuddyRequest]
 *     description: Retrieves all buddy requests received by a user with the given ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: The MongoDB object ID of the user
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: All requests received by user and whether the API request was successful
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 buddyrequests:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/BuddyRequest'
 *                   description: Array of Buddy Request objects containing all requests received by user
 *                 success:
 *                   type: boolean
 *                   description: Whether or not the request was successful
 */
router.get("/:id/received", async (req, res) => {
    const { id } = req.params;
    BuddyRequestModel.find({ receiver: id }, async (err, buddyrequests) => {
      res.send({
        success: true,
        buddyrequests: buddyrequests,
        });
    });
});


module.exports = router;